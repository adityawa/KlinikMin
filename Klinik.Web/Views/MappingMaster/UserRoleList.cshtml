@model Klinik.Entities.MappingMaster.UserRoleModel

@{
    ViewBag.Title = "UserRoleList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    table.dataTable.select tbody tr,
    table.dataTable thead th:first-child {
        cursor: pointer;
    }
</style>

<button id="btnSave" class="btn btn-primary"><i class="fa fa-save"></i> @Klinik.Resources.UIMessages.Save </button>

<br /><br />

<section class="panel">
    <header class="panel-heading">
        <div class="panel-actions">
            <a href="#" class="fa fa-caret-down"></a>
        </div>
        <h5 class="panel-title">@Klinik.Resources.UIMessages.RoleAssignment</h5>
    </header>
    <div class="panel-body">
        <div class="form-group">
            <label class="col-md-2 control-label" for="inputDefault">@Klinik.Resources.UIMessages.Username</label>
            <div class="col-md-4">
                @Html.TextBoxFor(x => x.UserName, new { @class = "form-control", @disabled = "Disabled" })
                @Html.HiddenFor(x => x.UserID, new { @Id = "hdUserId" })
            </div>
        </div>

        <div style="width:100%; margin:0 auto">
            <table id="tbUserRole" class="table table-striped table-bordered dt-responsive" cellspacing="0">
                <thead>
                    <tr>
                        <th><input name="select_all" value="1" type="checkbox"></th>
                        <th>@Klinik.Resources.UIMessages.ID</th>
                        <th>@Klinik.Resources.UIMessages.Role</th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</section>

@section Scripts {
    <script type="text/javascript">
    $(document).ready(function () {

        toastr.options = {
            "closeButton": true,
            "positionClass": "toast-top-full-width",
            "onclick": null,
            "showDuration": "0",
            "hideDuration": "0",
            "timeOut": "0",
            "showMethod": "fadeIn"
        };

        var _iduser = getUrlVars()["userid"];
        var rows_selected = [];

        var array = @Html.Raw(Json.Encode(Model.RoleIds));
        if (array != null && array.length > 0) {
            for (var i = 0; i < array.length; i++) {
                rows_selected.push(array[i]);
            }
        }


        var table = $('#tbUserRole').DataTable({
            "autoWidth": false,
            "processing": true,
            "serverSide": true,
            "filter": true,
            "orderMulti": false,
            "pageLength": 10,
            'ajax': {
                "url": "/MappingMaster/GetUserRoleData?userid="+_iduser,
                "type": "POST",
                "datatype": "json"
            },
            'columnDefs': [
                {
                    'targets': 0,
                    'searchable': false,
                    'orderable': false,
                    'width': '1%',
                    'className': 'dt-body-center',
                    'render': function (data, type, full, meta) {
                        return '<input type="checkbox">';
                    }
                },
                {
                    "targets": 1,
                    "searchable": true,
                    "orderable": true,
                    "visible": false,
                    "data": "Id"
                },
                {
                    "targets": 2,
                    "searchable": false,
                    "orderable": false,
                    "data": "RoleName"
                }
                ],


            'order': [[2, 'asc']],
            'rowCallback': function (row, data, dataIndex) {
                // Get row ID
                var rowId = data.Id;
                if ($.inArray(rowId, rows_selected) != -1) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).addClass('selected');
                }
            }
        });


        $('#tbUserRole tbody').on('click', 'input[type="checkbox"]', function (e) {
            var $row = $(this).closest('tr');
            var data = table.row($row).data();
            var rowId = data.Id;
            var index = $.inArray(rowId, rows_selected);
            if (this.checked && index === -1) {
                rows_selected.push(rowId);
            } else if (!this.checked && index !== -1) {
                rows_selected.splice(index, 1);
            }

            if (this.checked) {
                $row.addClass('selected');
            } else {
                $row.removeClass('selected');
            }
            updateDataTableSelectAllCtrl(table);
            e.stopPropagation();
        });


        $('#tbUserRole').on('click', 'tbody td, thead th:first-child', function (e) {
            $(this).parent().find('input[type="checkbox"]').trigger('click');
        });


        $('thead input[name="select_all"]', table.table().container()).on('click', function (e) {
            if (this.checked) {
                $('#tbRolePriv tbody input[type="checkbox"]:not(:checked)').trigger('click');
            } else {
                $('#tbRolePriv tbody input[type="checkbox"]:checked').trigger('click');
            }

            // Prevent click event from propagating to parent
            e.stopPropagation();
        });


        table.on('draw', function () {
            // Update state of "Select all" control
            updateDataTableSelectAllCtrl(table);
        });

        $('#btnSave').click(function (e) {
            if (window.FormData != undefined) {
                if (rows_selected.length <= 0) {
                    alert('please specify at least one privilege');
                }
                else {
                    var form_data = new FormData();
                    form_data.append("UserID", $('#hdUserId').val());

                    form_data.append("Roles", JSON.stringify(rows_selected));

                    $.ajax({
                        type: 'POST',
                        url: '/MappingMaster/CreateUserRole',
                        contentType: false,
                        processData: false,
                        data: form_data,
                        async: "true",
                        success: function (result) {
                            if (result.Status == true) {
                                toastr.success(result.Message);
                            }
                            else {
                                toastr.error(result.Message);
                            }
                        },
                        error: function (xhr, status, p3, p4) {
                            var err = "Error " + " " + status + " " + p3 + " " + p4;
                            if (xhr.responseText && xhr.responseText[0] == "{")
                                err = JSON.parse(xhr.responseText).Message;
                            console.log(err);
                        }
                    });
                }

            }
            else {
                toastr.error("Your Browser is not support Form Data");
            }
        });
    });


    function updateDataTableSelectAllCtrl(table) {
        var $table = table.table().node();
        var $chkbox_all = $('tbody input[type="checkbox"]', $table);
        var $chkbox_checked = $('tbody input[type="checkbox"]:checked', $table);
        var chkbox_select_all = $('thead input[name="select_all"]', $table).get(0);


        if ($chkbox_checked.length === 0) {
            chkbox_select_all.checked = false;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = false;
            }


        } else if ($chkbox_checked.length === $chkbox_all.length) {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = false;
            }


        } else {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = true;
            }
        }
    }

    function getUrlVars() {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars;
    }

    </script>
}